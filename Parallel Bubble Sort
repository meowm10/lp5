#include <iostream>
#include <vector>
#include <omp.h>
using namespace std;
// Parallel bubble sort function
void parallelBubbleSort(vector<int>& arr) {
 int n = arr.size();
 bool swapped = true;
 #pragma omp parallel
 {
 while (swapped) {
 swapped = false;
 #pragma omp for
 for (int i = 0; i < n - 1; ++i) {
 if (arr[i] > arr[i + 1]) {
 swap(arr[i], arr[i + 1]);
 swapped = true;
 }
 }
 }
 }
}
int main() {
 // Example array
 vector<int> arr = {64, 34, 25, 12, 22, 11, 90};
 cout << "Original array: ";
 for (int num : arr) {
 cout << num << " ";
 }
 cout << endl;
 // Perform parallel bubble sort
 parallelBubbleSort(arr);
 cout << "Sorted array: ";
 for (int num : arr) {
 cout << num << " ";
 }
 cout << endl;
 return 0;
}

Ouput: Original array: 64 34 25 12 22 11 90 
Sorted array: 11 12 22 25 34 64 90
